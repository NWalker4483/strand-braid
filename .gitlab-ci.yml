variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo-proj

cache:
  key: there-is-no-cache
  policy: pull

# At some point, we should do: cargo test --all

# lapack notes for the future:
#   Ubuntu 16.04     - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl build-essential libgfortran-5-dev liblapack-dev libblas-dev
#   Debian (jessie?) - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y curl build-essential libgfortran-6-dev liblapack-dev libblas-dev

test_crates:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"

    - DEBIAN_FRONTEND=noninteractive apt-get install -y libgstreamer-plugins-base1.0-dev libapriltag-dev
    - rustup target add thumbv7em-none-eabihf

    # Test apriltag
    - cd apriltag
    - cargo test --release
    - cd ..

    # Test gstreamer apriltag detector
    - cd gst-plugin-apriltag
    - cargo test --release
    - cd ..

    - cd gst-plugin-nvargustime
    - cargo test --release
    - cd ..

    # Test freemovr-calibration, which requires opencv
    - cd freemovr-calibration
    # run test in release mode, otherwise slow
    - PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig OPENCV_STATIC=1 cargo test --release --features "opencv"
    - cd ..

    # Test freemovr-calibration-cli
    - cd freemovr-calibration/freemovr-calibration-cli
    - PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig OPENCV_STATIC=1 cargo build --features "opencv"
    - cd ../..

    - cd ci2-simple-demo
    - cargo test --features backend_pyloncxx
    - cd ..

    - cd ci2-cli
    - cargo test --features backend_pyloncxx
    - cd ..

test_flydra2:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - ls -l _submodules
    # These packages are listed in the requirements.txt files for flydra_core and flydra_analysis.
    - apt-get -y update && DEBIAN_FRONTEND=noninteractive apt install -y python3-pip python3-scipy python3-tables python3-six python3-nose python3-cairo python3-pandas python3-h5py python3-traitsui python3-pillow python3-aggdraw python3-imageio python-is-python3
    - pip install cgkit1
    - pip install flydra_core
    - pip install flydra_analysis

    - export RUSTFLAGS="-D warnings"

    - cd braid-offline
    - cargo build --release
    - cd ..
    - cd flydra2
    - cargo build --release
    - PATH="../target/release:$PATH" cargo test --release
    - cd ..
    - cd strand-cam-pseudo-cal
    - cargo test --release
    - cd ..
    - cd braid-offline
    # test 3D retracking
    - PATH="../target/release:$PATH" cargo test --release
    # test 2D retracking
    - PATH="../target/release:$PATH" cargo run --no-default-features --features "flat-3d flydra2/bundle_files" --bin braid-offline-retrack --release -- -d test_data/20180330_113743.short -o /tmp/k2d.braidz
    # TODO: test 3D retracking using `rust-cam-testing-data`
    # cargo run --bin braid-offline-retrack -- -d ..\..\rust-cam-testing-data\20200622_111457.braid -o tmp

test_crates_rust_1_56:
  image: rust:1.56.0
  script:
    - rustup target add thumbv7em-none-eabihf
    - export RUSTFLAGS="-D warnings"

    # Test mvg
    - cd mvg
    - cargo test
    - cd ..

    # Test braid-april-cal-webapp
    - cd braid-april-cal-webapp
    - cargo test
    - cd ..

    # Test datetime-conversion
    - cd datetime-conversion
    - cargo test
    - cd ..

    # Test simple-obj-parse
    - cd simple-obj-parse
    - cargo test
    - cd ..

    # strand-cam-offline-kalmanize
    - cd strand-cam-offline-kalmanize
    - cargo test
    - cd ..

    # Test imops
    - cd imops
    - cargo test
    - cargo test --no-default-features --features std
    - cargo build --no-default-features --target thumbv7em-none-eabihf
    - cd ..

    # Test braidz-parser
    - cd braidz-parser
    - cargo test
    - cd ..

    # Test tracking
    - cd tracking
    - cargo test
    - cd ..

    # Test ufmf
    - cd ufmf
    - cargo test
    - cd ..

    # Test flydra-types
    - cd flydra-types
    - cargo test
    - cd ..

    # Test flydra-mvg
    - cd flydra-mvg
    - cargo test
    - cd ..

    # Test fmf
    - cd fmf
    - cargo test
    - cd ..

test_crates_rust_nightly:
  image: rust:1.56.0
  script:
    - export RUSTFLAGS="-D warnings"

    # Use known good nightly
    - rustup update --no-self-update nightly-2022-03-21

    # Test imops with nightly features
    - cd imops
    - cargo +nightly-2022-03-21 test --no-default-features --features std,packed_simd
    - cd ..

test_image_tracker:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - _packaging/setup-ubuntu-20.04-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"
    - cargo --version
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && cd image-tracker && RUST_BACKTRACE=1 cargo test --features "ipp-sys/2019"

test_fastimage:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - _packaging/setup-ubuntu-20.04-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && cd fastimage && cargo test --verbose --features "ipp-sys/2019" -- --nocapture --test-threads 1

camtrig-ubuntu2004-debs:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - mkdir -p $CI_PROJECT_DIR/focal-camtrig-debs
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper

    - cd camtrig
    - cp $CI_PROJECT_DIR/build/camtrig ./
    - cp $CI_PROJECT_DIR/camtrig-firmware-${CI_COMMIT_SHA}.bin ./camtrig-firmware.bin
    - DEB_BUILD_OPTIONS=nostrip dpkg-buildpackage -rfakeroot -b -uc -us
    - cd ..
    - cp -a camtrig*.changes $CI_PROJECT_DIR/focal-camtrig-debs/
    - cp -a camtrig*.deb $CI_PROJECT_DIR/focal-camtrig-debs/

  needs:
    - camtrig-linux
    - camtrig-firmware
  artifacts:
    paths:
      - focal-camtrig-debs/
    name: "rust-cam-focal-camtrig-debs-${CI_COMMIT_SHA}"

build-freemovr-calibration:
  image: rust:1.56.0
  script:
    - export RUSTFLAGS="-D warnings"
    - cd freemovr-calibration/freemovr-calibration-cli
    - cargo build --release
    - mkdir -p $CI_PROJECT_DIR/freemovr-cal-linux
    - ldd ../../target/release/freemovr-calibration
    - ls -lh ../../target/release/freemovr-calibration
    - cp -a ../../target/release/freemovr-calibration $CI_PROJECT_DIR/freemovr-cal-linux
  artifacts:
    paths:
      - freemovr-cal-linux
    name: "freemovr-cal-linux-${CI_COMMIT_SHA}"

build-freemovr-calibration-webapp:
  image: rust:1.56.0
  script:
    - export RUSTFLAGS="-D warnings"
    - export PATH="$PATH:$CARGO_HOME/bin"
    - echo $PATH
    - rustup target add wasm32-unknown-unknown

    - cargo install wasm-bindgen-cli --version 0.2.79 --force
    - wasm-bindgen --version

    - cd freemovr-calibration/freemovr-calibration-webapp
    - ./build.sh
    - mkdir -p $CI_PROJECT_DIR/freemovr-cal-webapp
    - cp -a pkg/* $CI_PROJECT_DIR/freemovr-cal-webapp
  artifacts:
    paths:
      - freemovr-cal-webapp
    name: "freemovr-cal-webapp-${CI_COMMIT_SHA}"

deploy-freemovr-calibration-webapp:
  tags:
    - rsync
  script:
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|eh/SuKKTa6MBQdNoN+gs5XJrzLY=|eir5FQuVRJtnzVp3hyOIlPXPEGs= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDI610RLfmUtxDbgDkNdTmnIEAjDsiiOrODVQNkq4TXjvx6+TUSgL2vo1Sxq4c/I9uD3HeXK2HnBH0WJZN5FB9g=" >> ~/.ssh/known_hosts
    - echo "$SSH_STRAWLAB_ORG_VR_CAL" > ~/.ssh/id_rsa

    - cat /root/.ssh/id_rsa
    - ls -l /root/.ssh/id_rsa
    - md5sum /root/.ssh/id_rsa
    - chmod go-rx ~/.ssh/id_rsa
    - ls -ltrh freemovr-cal-webapp
    - rsync -avzP --delete freemovr-cal-webapp/ vr-cal-upload@139.162.155.33:/var/www/strawlab.org/html/vr-cal
  environment:
    name: production
    url: https://strawlab.org/vr-cal/
  needs:
    - build-freemovr-calibration-webapp
  when: manual

build-api-docs:
  image: ubuntu:focal
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    # build docs for braid-run
    - cd $CI_PROJECT_DIR/braid/braid-run
    - RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1" NUM_JOBS=2 cargo doc --no-default-features --features "serve_files jemalloc backtrace"
    - cd ../..

    # remove potential old output directory
    - rm -rf build
    - mkdir build

    # rename directory
    - mv target/doc build/latest
  artifacts:
    paths:
      - build/
    name: "api-docs-${CI_COMMIT_SHA}"

stage-api-docs:
  image: ubuntu:focal
  script:
    - apt-get update && apt-get install -y rsync openssh-client
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|zo8kIvGXE6Nf3WNYrk/IwXyNt18=|cMmSpBho6sRzu8Z4+LNSFAFY4L8= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGs/hBRnah/Zi6behPr3X+wamzb6wzwj/rxQAwWX6uXwu/enV2zfyM5TzeAL3PbWXbLsb5bLumCHIDUg15UMLK8=" >> ~/.ssh/known_hosts
    - echo "|1|c1I4D0LzU1HjupN0Wc9Md1QIYVE=|ITvXx3AglaDGm8hhfahKF52hmGU= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGs/hBRnah/Zi6behPr3X+wamzb6wzwj/rxQAwWX6uXwu/enV2zfyM5TzeAL3PbWXbLsb5bLumCHIDUg15UMLK8=" >> ~/.ssh/known_hosts
    - echo "$SSH_STRAWLAB_ORG_STAGING" > ~/.ssh/id_rsa
    - chmod go-rx ~/.ssh/id_rsa
    - rsync -az --delete build/latest/ strawlab-org-staging@strawlab-org-staging.strawlab-internal.de:strawlab-org-staging.strawlab-internal.de/strand-braid-api-docs/latest
  environment:
    name: strand-braid-api-docs-staging
    url: http://strawlab-org-staging.strawlab-internal.de/strand-braid-api-docs/latest
  needs:
    - build-api-docs

publish-api-docs:
  # To deploy API docs in the Gitlab CI userinterface for the pipeline, click on
  # this job (not the "play" button but the name of the unstarted job). This
  # will bring up a screen in which variables can be manually entered. Create a
  # variable with key STRAWLAB_ORG_SSH_PRIVATE_KEY in which the value is the SSH
  # private key for the user below. In case accidentally deployment was
  # triggered without entering the variable, delete the job log and the gitlab
  # screen will be available again.
  image: ubuntu:focal
  script:
    - apt-get update && apt-get install -y rsync openssh-client
    - mkdir ~/.ssh
    - chmod 0700 ~/.ssh
    - echo "|1|TVmVl2hQiIk/4ulpa2dBYJ/e/W4=|vTZrgQJrQr9SIzhO/pHBYI18jdY= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLauURSCGIiqHsTQQ/gYhSgwceD2EEnSn9cLhhmRCxU4L/2CGmMrb9StqcxF4QRgfD6TGNqjmvKMsHyeTX+ks4U=" >> ~/.ssh/known_hosts
    - echo "|1|FvMsl+rOqeqmmsYydYgAnmSEBBM=|AEa3BGJtS84WFATwXAN+G1jOnss= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLauURSCGIiqHsTQQ/gYhSgwceD2EEnSn9cLhhmRCxU4L/2CGmMrb9StqcxF4QRgfD6TGNqjmvKMsHyeTX+ks4U=" >> ~/.ssh/known_hosts
    # Because the gitlab UI does not allow multiline inputs, the key was encoded
    # with `cat dreamhost | base64 | tr "\n" " "`. Take the gitlab CI variable
    # with key STRAWLAB_ORG_SSH_PRIVATE_KEY, save to private SSH key.
    - echo "$STRAWLAB_ORG_SSH_PRIVATE_KEY" | tr " " "\n" | base64 --decode  > ~/.ssh/id_rsa
    - chmod go-rx ~/.ssh/id_rsa
    - cat ~/.ssh/id_rsa
    - rsync -az --delete build/latest/ dh_3pakh2@disston.dreamhost.com:strawlab.org/strand-braid-api-docs/latest
  environment:
    name: strand-braid-api-docs
    url: https://strawlab.org/strand-braid-api-docs/latest
  needs:
    - build-api-docs
  when: manual

strand-cam-pylon-ubuntu2004:
  image: ubuntu:focal
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - _packaging/setup-ubuntu-20.04-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"

    - rustc --version

    - cd strand-cam/yew_frontend && time ./build.sh && cd ..
    # force recomputing git version tag
    - touch build.rs

    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 cargo build --features "bundle_files posix_sched_fifo backend_pyloncxx ipp-sys/2019 checkercal fiducial backtrace ci2-pyloncxx/backtrace imops/packed_simd" --release
    # - ../target/release/strand-cam --version # disabled because requires pylon libs in path
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/strand-cam $CI_PROJECT_DIR/build/strand-cam-pylon
    - cd $CI_PROJECT_DIR/braid-offline
    - cargo build --release --bin write-debian-changelog
    - ../target/release/write-debian-changelog strand-cam-pylon focal > $CI_PROJECT_DIR/build/strand-cam-pylon.changelog
  artifacts:
    paths:
      - build/
    name: "strand-cam-pylon-ubuntu2004-${CI_COMMIT_SHA}"

py-strandcam-pylon-linux:
  image: ubuntu:focal
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - _packaging/setup-ubuntu-20.04-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"

    - export RUSTFLAGS="-D warnings"

    - rustc --version
    - curl --show-error --fail --silent https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh > /tmp/Miniconda3-latest-Linux-x86_64.sh
    - chmod a+x /tmp/Miniconda3-latest-Linux-x86_64.sh
    - bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda3
    - source $HOME/miniconda3/etc/profile.d/conda.sh
    - cd py-strandcam
    - conda env create -f environment.yml
    - conda activate strandcam
    - cd ..

    - cd strand-cam/yew_frontend && time ./build.sh && cd ..
    # force recomputing git version tag
    - touch build.rs
    - cd ../py-strandcam
    - touch rust/build.rs
    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 BACKEND=pyloncxx IPP_SYS=2019 python setup.py install

strand-cam-camtrig-pylon-ubuntu2004:
  image: ubuntu:focal
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - _packaging/setup-ubuntu-20.04-ipp.sh
    - export PATH="$PATH:$CARGO_HOME/bin"
    - export RUSTFLAGS="-D warnings"

    - cd strand-cam/yew_frontend && time ./build-flydratrax.sh && cd ..
    # force recomputing git version tag
    - touch build.rs

    - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 cargo build --no-default-features --features "bundle_files posix_sched_fifo backend_pyloncxx flydratrax imtrack-dark-circle flydra2/bundle_files ipp-sys/2019 cfg-pt-detect-src-prefs checkercal fiducial with_camtrig backtrace ci2-pyloncxx/backtrace imops/packed_simd" --release
    - cd ../strand-cam-offline-kalmanize
    - cargo build --release
    # - ../target/release/strand-cam --version # disabled because requires pylon libs in path
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/strand-cam $CI_PROJECT_DIR/build/strand-cam-camtrig-pylon
    - cp ../target/release/strand-cam-offline-kalmanize $CI_PROJECT_DIR/build/
    - cd $CI_PROJECT_DIR/braid-offline
    - cargo build --release --bin write-debian-changelog
    - ../target/release/write-debian-changelog strand-cam-camtrig-pylon focal > $CI_PROJECT_DIR/build/strand-cam-camtrig-pylon.changelog
    - cat $CI_PROJECT_DIR/build/strand-cam-camtrig-pylon.changelog
  artifacts:
    paths:
      - build/
    name: "strand-cam-camtrig-pylon-linux-${CI_COMMIT_SHA}"

braid-offline-ubuntu2004:
  image: ubuntu:focal
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper git
    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/braid-offline
    # force recomputing git version tag
    - touch Cargo.toml
    - cargo build --release

    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/braid-offline-retrack $CI_PROJECT_DIR/build/
    - cp ../target/release/compute-flydra1-compat $CI_PROJECT_DIR/build/
    - cp ../target/release/write-debian-changelog $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/
    name: "braid-offline-ubuntu2004-${CI_COMMIT_SHA}"

braid-process-video-ubuntu2004:
  image: ubuntu:focal
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper git libavformat-dev libavfilter-dev libavdevice-dev libavresample-dev pkg-config libclang-dev curl

    - curl --show-error --fail --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - export PKG_CONFIG_PATH=/opt/libvpx/libvpx-1.8.0/lib/pkgconfig

    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd braid-process-video

    - touch Cargo.toml
    - cargo build --release --features read-mkv

    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/braid-process-video $CI_PROJECT_DIR/build/
  artifacts:
    paths:
      - build/
    name: "braid-process-video-ubuntu2004-${CI_COMMIT_SHA}"

slow-braid-process-video-test:
  image: ubuntu:focal
  when: manual
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y git libavformat-dev libavfilter-dev libavdevice-dev libavresample-dev pkg-config libclang-dev curl build-essential
    - cc --version

    - curl --show-error --fail --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - export PKG_CONFIG_PATH=/opt/libvpx/libvpx-1.8.0/lib/pkgconfig

    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd braid-process-video
    - cargo test --release --features read-mkv -- --ignored

braidz-cli-ubuntu2004:
  image: ubuntu:focal
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper
    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - cd $CI_PROJECT_DIR/braidz-parser/braidz-cli
    # force recomputing git version tag
    - touch Cargo.toml
    - cargo build --release
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../../target/release/braidz-cli $CI_PROJECT_DIR/build
  artifacts:
    paths:
      - build/
    name: "braidz-cli-ubuntu2004-${CI_COMMIT_SHA}"

fmf-cli-ubuntu2004:
  image: ubuntu:focal
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper pkg-config

    - curl https://sh.rustup.rs -sSf | sh -s -- --profile minimal -y
    - source $CARGO_HOME/env
    - export RUSTFLAGS="-D warnings"

    - curl --show-error --fail --silent https://internal-static.strawlab.org/software/libvpx/libvpx-opt-static_1.8.0-0ads1_amd64.deb > /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - dpkg -i /tmp/libvpx-opt-static_1.8.0-0ads1_amd64.deb
    - export PKG_CONFIG_PATH=/opt/libvpx/libvpx-1.8.0/lib/pkgconfig

    # test mkv-writer start
    - cd $CI_PROJECT_DIR/mkv-writer
    - PKG_CONFIG_PATH=/opt/libvpx/libvpx-1.8.0/lib/pkgconfig cargo run --example save-animation --release -- vp8
    # test mkv-writer stop

    - cd $CI_PROJECT_DIR/fmf/fmf-cli
    - cargo build --release --features nv-h264,import-webm,mkv-writer/vpx
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../../target/release/fmf $CI_PROJECT_DIR/build
  artifacts:
    paths:
      - build/
    name: "fmf-cli-ubuntu2004-${CI_COMMIT_SHA}"

braid-webapps:
  image: rust:1.56.0
  script:
    - export RUSTFLAGS="-D warnings"

    # Update wasm-bindgen to latest...
    - cargo update
    # ... and install latest (and therefore matching) wasm-pack
    - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    # ... and latest wasm-bindgen-cli
    - cargo install -f wasm-bindgen-cli
    - rustup target add wasm32-unknown-unknown
    - export PATH="$PATH:$CARGO_HOME/bin"

    - wasm-pack --version
    - wasm-bindgen --version

    - cd braidz-viewer
    - ./build.sh
    - cd ..

    - cd braid-april-cal-webapp
    - ./build.sh
    - cd ..

braid-ubuntu2004:
  image: ubuntu:focal
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - _packaging/setup-ubuntu-20.04.sh
    - export PATH="$PATH:$CARGO_HOME/bin"
    # - export RUSTFLAGS="-D warnings"

    # build mainbrain web frontend
    - cd $CI_PROJECT_DIR/flydra2-mainbrain/frontend
    - ./build.sh

    - mkdir -p $CI_PROJECT_DIR/build

    # build braid-run
    - cd $CI_PROJECT_DIR/braid/braid-run
    # force recomputing git version tag
    - touch build.rs
    - RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1" NUM_JOBS=2 cargo build --no-default-features --features "bundle_files jemalloc backtrace" --release
    - ldd ../../target/release/braid-run
    - cp ../../target/release/braid-run $CI_PROJECT_DIR/build

    # build braid
    - cd $CI_PROJECT_DIR/braid
    # force recomputing git version tag
    - touch build.rs
    - NUM_JOBS=2 cargo build --release
    - ldd ../target/release/braid
    - cp ../target/release/braid $CI_PROJECT_DIR/build
    - cp ../target/release/braid-show-config $CI_PROJECT_DIR/build
    - cp ../target/release/braid-default-config $CI_PROJECT_DIR/build

  artifacts:
    paths:
      - build/
    name: "braid-ubuntu2004-${CI_COMMIT_SHA}"

# braid-strand-cam-pylon-ubuntu2004:
#   image: ubuntu:focal
#   variables:
#     GIT_SUBMODULE_STRATEGY: recursive
#   script:
#     - _packaging/setup-ubuntu-20.04.sh
#     - export PATH="$PATH:$CARGO_HOME/bin"
#     - export RUSTFLAGS="-D warnings"

#     - cd $CI_PROJECT_DIR/strand-cam/yew_frontend && time ./build.sh

#     - mkdir -p $CI_PROJECT_DIR/build

#     # build braid-strand-cam-pylon
#     - cd $CI_PROJECT_DIR/strand-cam
#     # force recomputing git version tag
#     - touch build.rs
#     - source /opt/intel/bin/compilervars.sh -arch intel64 -platform linux && OPENCV_STATIC=1 PKG_CONFIG_PATH=/opt/opencv-3.2-static/lib/pkgconfig:/opt/libvpx/libvpx-1.8.0/lib/pkgconfig IPP_STATIC=1 RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1 -C link-args=-Wl,-rpath,/opt/pylon/lib" NUM_JOBS=2 cargo build --no-default-features --features "bundle_files backend_pyloncxx ipp-sys/2019 fiducial jemalloc backtrace ci2-pyloncxx/backtrace strand-cam/checkercal imtrack-absdiff" --release
#     - ldd ../target/release/strand-cam
#     - cp ../target/release/strand-cam $CI_PROJECT_DIR/build/braid-strand-cam-pylon
#   artifacts:
#     paths:
#       - build/
#     name: "braid-strand-cam-pylon-ubuntu2004-${CI_COMMIT_SHA}"

camtrig-linux:
  image: rust:1.56.0
  script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y libudev-dev
    - export RUSTFLAGS="-D warnings"

    - cd camtrig
    - NUM_JOBS=2 RUSTFLAGS="$RUSTFLAGS -C target-cpu=sandybridge -C codegen-units=1" cargo build --release
    - mkdir -p $CI_PROJECT_DIR/build
    - cp ../target/release/camtrig $CI_PROJECT_DIR/build/camtrig
  artifacts:
    paths:
      - build/
    name: "camtrig-linux-${CI_COMMIT_SHA}"

camtrig-firmware:
  image: rust:1.56.0
  script:
    - export RUSTFLAGS="-D warnings"

    - rustc --version
    - cd camtrig-firmware

    # Could do `cargo install cargo-binutils` instead of the following lines,
    # but then we'd build from source, which just takes longer.
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-size/cargo-size-0.1.5-amd64.exe > $CARGO_HOME/bin/cargo-size
    - chmod a+x $CARGO_HOME/bin/cargo-size
    - mkdir -p $CARGO_HOME/bin && curl --silent https://internal-static.strawlab.org/software/cargo-objcopy/cargo-objcopy-0.1.5-amd64.exe > $CARGO_HOME/bin/cargo-objcopy
    - chmod a+x $CARGO_HOME/bin/cargo-objcopy

    - rustup component add llvm-tools-preview
    - rustup component add rust-src
    - rustup target add thumbv7em-none-eabihf
    - rm -f target_makefile/thumbv7em-none-eabihf/release/camtrig-firmware.bin
    - touch Cargo.toml # ensure we rebuild it
    - make
    - cp target_makefile/thumbv7em-none-eabihf/release/camtrig-firmware.bin $CI_PROJECT_DIR/camtrig-firmware-${CI_COMMIT_SHA}.bin
  artifacts:
    paths:
      - camtrig-firmware-${CI_COMMIT_SHA}.bin
    name: "camtrig-firmware-${CI_COMMIT_SHA}"

# -------

strand-braid-ubuntu-2004:
  image: ubuntu:focal
  script:
    # The debian packaging infrastructure wants to have the .so files available to automatically determine which packages to depend on. The
    # package list here is probably more than needed, but should contain the required subset.
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y dpkg-dev debhelper libudev-dev libapriltag-dev libssl-dev zlib1g-dev curl libavformat-dev libavfilter-dev libavdevice-dev libavresample-dev

    # Download pylon and install 6
    - $CI_PROJECT_DIR/_packaging/setup-ubuntu-20.04-pylon.sh

    - mkdir -p strand-braid-ubuntu-2004-${CI_COMMIT_TAG}

    - cd $CI_PROJECT_DIR/_packaging
    - pwd
    - ls -l ../build
    - ldd ../build/strand-cam-camtrig-pylon
    - ldd ../build/strand-cam-pylon
    - make
    - for F in *.deb; do echo; echo $F; dpkg-deb -I $F; done
    - cp -a *.deb $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/

    - cp $CI_PROJECT_DIR/_packaging/ubuntu-2004-installer-zip-readme.txt $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/README.txt
    - ls -lh $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/
    - dpkg --contents $CI_PROJECT_DIR/strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/*.deb
  needs:
    - braid-offline-ubuntu2004
    - braid-process-video-ubuntu2004
    - braid-ubuntu2004
    # - braid-strand-cam-pylon-ubuntu2004
    - braidz-cli-ubuntu2004
    - fmf-cli-ubuntu2004
    - strand-cam-pylon-ubuntu2004
    - strand-cam-camtrig-pylon-ubuntu2004
  # For releases, we should upload the .zip to the github releases page, as the
  # zip (but not the deb) will include that this is for "ubuntu-2004" in the
  # filename.
  artifacts:
    paths:
      - strand-braid-ubuntu-2004-${CI_COMMIT_TAG}/
    name: "strand-braid-ubuntu-2004-${CI_COMMIT_TAG}"
