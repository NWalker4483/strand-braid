[package]
name = "strand-cam"
version = "0.12.0-alpha.9"                       # braid release synchronized
authors = ["Andrew Straw <strawman@astraw.com>"]
build = "build.rs"
homepage = "https://strawlab.org/strand-cam"
edition = "2021"
rust-version = "1.76"

[lib]
path = "src/strand-cam.rs"

[dependencies]
jemallocator = { version = "0.3", optional = true }
async-change-tracker.workspace = true
qrcodegen.workspace = true
csv = { workspace = true, optional = true }
libflate = { workspace = true, optional = true }
env-tracing-logger.workspace = true
home.workspace = true

serde.workspace = true
serde_json.workspace = true
serde_yaml.workspace = true
serde_cbor.workspace = true
webbrowser = "0.8.3"
clap.workspace = true
preferences-serde1.workspace = true
base64.workspace = true
directories = "4.0.1"
eyre.workspace = true
ipp-sys = { workspace = true, optional = true }
ci2.workspace = true
ci2-async.workspace = true
ci2-types.workspace = true
ci2-remote-control.workspace = true
machine-vision-formats.workspace = true
basic-frame.workspace = true
fmf.workspace = true
ufmf.workspace = true
chrono.workspace = true
convert-image.workspace = true
hyper.workspace = true
hyper-rustls = { version = "0.27.3", default-features = false, features = [
    "webpki-tokio",
    "native-tokio",
    "http1",
    "logging",
    "ring",
] }
futures.workspace = true
tokio.workspace = true
tokio-util.workspace = true
tokio-stream.workspace = true
eframe = { version = "0.29.0", default-features = false, features = [
    "default_fonts",
    "glow",
], optional = true }
dotenv.workspace = true
json-lines.workspace = true

strand-cam-storetype.workspace = true
flydra-feature-detector = { workspace = true, optional = true }
flydra-feature-detector-types.workspace = true
flydra-pt-detect-cfg.workspace = true
datetime-conversion.workspace = true
http-video-streaming-types.workspace = true
http-video-streaming.workspace = true
semver = { version = "1", features = ["serde"] }
shellexpand.workspace = true
imops.workspace = true
led-box-comms.workspace = true
flydra-types = { workspace = true, features = ["start-listener", "build-urls"] }
flydra2 = { workspace = true, optional = true }
mvg = { workspace = true, optional = true }
flydra-mvg = { workspace = true, optional = true }
tokio-serial.workspace = true
bytes.workspace = true
nalgebra.workspace = true
lstsq.workspace = true
opencv-ros-camera.workspace = true
approx = { workspace = true, optional = true }
byteorder.workspace = true
target = "2.0.0"
hyper-util.workspace = true
http-body-util.workspace = true
tower.workspace = true
axum.workspace = true
tracing.workspace = true
tracing-panic.workspace = true
axum-token-auth.workspace = true
tower-http.workspace = true
tower-serve-static = { workspace = true, optional = true }
include_dir = { workspace = true, optional = true }
http-body.workspace = true
http.workspace = true
cookie.workspace = true

bui-backend-session-types.workspace = true
braid-config-data.workspace = true
ci2-pylon-types.workspace = true
ci2-vimba-types.workspace = true
opencv-calibrate = { workspace = true, optional = true }
camcal = { workspace = true, optional = true }
rust-cam-bui-types.workspace = true
mp4-writer = { workspace = true, features = ["openh264-encode", "nv-encode"] }
strand-cam-csv-config-types.workspace = true
bg-movie-writer.workspace = true
ffmpeg-writer.workspace = true
strand-cam-pseudo-cal = { workspace = true, optional = true }
nvenc.workspace = true
ads-apriltag = { workspace = true, optional = true }
braid-http-session.workspace = true
bui-backend-session.workspace = true
event-stream-types.workspace = true
cookie_store.workspace = true

[target.'cfg(target_os = "linux")'.dependencies]
v4l = "0.14"

[build-dependencies]
build-util.workspace = true

[features]
default = ["flydra_feat_detect", "imtrack-absdiff", "do_not_use_ipp"]

eframe-gui = ["eframe"]
fiducial = ["ads-apriltag", "csv", "libflate"]

checkercal = ["opencv-calibrate", "camcal", "mvg"]

# Serve style
## Bundle files into executable
bundle_files = ["flydra2?/bundle_files", "tower-serve-static", "include_dir"]
## Serve files from disk at runtime
serve_files = ["flydra2?/serve_files"]

imtrack-dark-circle = []
imtrack-absdiff = []

flydratrax = [
    "mvg",
    "strand-cam-pseudo-cal",
    "flydra-mvg",
    "approx",
    "flydra2",
    "flydra_feat_detect",
]

# build with the flydra-feature-detector
flydra_feat_detect = ["flydra-feature-detector"]

use_ipp = ["flydra-feature-detector?/use_ipp"]
do_not_use_ipp = ["flydra-feature-detector?/do_not_use_ipp"]
