[package]
name = "strand-cam"
version = "0.12.0-alpha.9"                       # braid release synchronized
authors = ["Andrew Straw <strawman@astraw.com>"]
build = "build.rs"
homepage = "https://strawlab.org/strand-cam"
edition = "2021"
rust-version = "1.76"

[lib]
path = "src/strand-cam.rs"

[dependencies]
jemallocator = { version = "0.3", optional = true }
async-change-tracker = "0.3.4"
qrcodegen = "1.4"
csv = { version = "1.1", optional = true }
libflate = { version = "1.0", optional = true }
env-tracing-logger = { path = "../env-tracing-logger" }

serde = { workspace = true, features = ["derive"] }
serde_json = "1.0.29"
serde_yaml = { workspace = true }
serde_cbor = "0.11"
webbrowser = "0.8.3"
tempfile = "3.4.0"
clap = { version = "4", features = ["string", "env"] }
preferences-serde1 = "2.0.0"
base64 = "0.12"
directories = "4.0.1"
eyre = { workspace = true }
parking_lot = "0.12"
thread-control = { version = "0.1.2", optional = true }
ipp-sys = { version = "0.4.4", optional = true }
ci2 = { path = "../ci2" }
ci2-async = { path = "../ci2-async" }
ci2-types = { path = "../ci2/ci2-types" }
ci2-remote-control = { path = "../ci2-remote-control" }
machine-vision-formats.workspace = true
timestamped-frame = { path = "../timestamped-frame" }
basic-frame = { path = "../basic-frame", features = ["convert-image"] }
fmf = { path = "../fmf" }
ufmf = { path = "../ufmf" }
chrono = { workspace = true, features = ["serde", "clock", "std", "wasmbind"] }
convert-image = { path = "../convert-image" }
hyper = { version = "1.1", features = ["client", "http1"] }
hyper-tls = "0.6"
futures = "0.3"
tokio = { version = "1.0.1", default-features = false, features = [
    "rt",
    "rt-multi-thread",
    "time",
    "sync",
] }
tokio-util = { version = "0.7.3", features = ["codec"] }
tokio-stream = { version = "0.1.6", features = ["time"] }
eframe = { version = "0.22.0", default-features = false, features = [
    "default_fonts",
    "glow",
], optional = true }
dotenv = "0.15.0"
json-lines = { version = "0.1.0", features = ["codec"] }

strand-cam-storetype = { path = "../strand-cam-storetype" }
flydra-feature-detector = { path = "../flydra-feature-detector", default-features = false, optional = true }
flydra-feature-detector-types = { path = "../flydra-feature-detector/flydra-feature-detector-types", default-features = false }
flydra-pt-detect-cfg = { path = "../flydra-feature-detector/flydra-pt-detect-cfg" }
datetime-conversion = { path = "../datetime-conversion" }
http-video-streaming-types = { path = "../http-video-streaming/http-video-streaming-types" }
http-video-streaming = { path = "../http-video-streaming" }
semver = { version = "1", features = ["serde"] }
shellexpand = "2"
imops = { path = "../imops" }
led-box-comms = { path = "../led-box-comms" }
flydra-types = { path = "../flydra-types", features = [
    "start-listener",
    "build-urls",
] }
flydra2 = { path = "../flydra2", default-features = false, optional = true }
mvg = { path = "../mvg", optional = true }
flydra-mvg = { path = "../flydra-mvg", optional = true }
tokio-serial = { version = "5.4.3" }
bytes = "1.0"
nalgebra = { workspace = true }
lstsq = { workspace = true }
opencv-ros-camera = { workspace = true }
approx = { version = "0.5", optional = true }
byteorder = "1.4"
target = "2.0.0"
hyper-util = { version = "0.1.1", features = ["full"] }
http-body-util = "0.1.0"
tower = "0.4.13"
axum = "0.7.4"
tracing = "0.1.40"
tracing-panic = "0.1.1"
axum-token-auth = { workspace = true }
tower-http = { version = "0.5.1", features = ["trace", "fs"] }
tower-serve-static = { version = "0.1", optional = true }
include_dir = { version = "0.7.3", optional = true }
http-body = "1.0.0"
http = "1.0.0"
cookie = "0.18.0"

bui-backend-session-types = { path = "../bui-backend-session/types" }
braid-config-data = { path = "../braid-config-data" }
opencv-calibrate = { path = "../opencv-calibrate", optional = true }
camcal = { path = "../camcal", optional = true }
rust-cam-bui-types = { path = "../rust-cam-bui-types" }
mp4-writer = { path = "../media-utils/mp4-writer", features = [
    "openh264-encode",
] }
strand-cam-csv-config-types = { path = "../strand-cam-csv-config-types" }
plugin-defs = { path = "../plugin-defs", optional = true }
bg-movie-writer = { path = "../bg-movie-writer" }
strand-cam-pseudo-cal = { path = "../strand-cam-pseudo-cal", optional = true }
nvenc = { path = "../nvenc" }
ads-apriltag = { path = "../apriltag", optional = true }
channellib = { path = "../channellib", optional = true }
braid-http-session = { path = "../braid-http-session" }
bui-backend-session = { path = "../bui-backend-session" }
event-stream-types = { path = "../event-stream-types" }
cookie_store = "0.20.0"

[target.'cfg(target_os = "linux")'.dependencies]
v4l = "0.14"

[build-dependencies]
build-util = { path = "../build-util" }

[features]
default = ["flydra_feat_detect", "imtrack-absdiff", "do_not_use_ipp"]

eframe-gui = ["eframe"]
fiducial = ["ads-apriltag", "csv", "libflate"]

backtrace = [
    "ci2/backtrace",
    "mp4-writer/backtrace",
    "bg-movie-writer/backtrace",
    "convert-image/backtrace",
    "http-video-streaming/backtrace",
    "flydra-feature-detector?/backtrace",
    "mvg?/backtrace",
    "flydra-mvg?/backtrace",
    "flydra2?/backtrace",
]

checkercal = ["opencv-calibrate", "camcal", "mvg"]

plugin-process-frame = ["plugin-defs", "thread-control", "channellib"]

# Serve style
## Bundle files into executable
bundle_files = ["flydra2?/bundle_files", "tower-serve-static", "include_dir"]
## Serve files from disk at runtime
serve_files = ["flydra2?/serve_files"]

imtrack-dark-circle = []
imtrack-absdiff = []

flydratrax = [
    "mvg",
    "strand-cam-pseudo-cal",
    "flydra-mvg",
    "approx",
    "flydra2",
    "flydra_feat_detect",
]

# build with the flydra-feature-detector
flydra_feat_detect = ["flydra-feature-detector"]

use_ipp = ["flydra-feature-detector?/use_ipp"]
do_not_use_ipp = ["flydra-feature-detector?/do_not_use_ipp"]
